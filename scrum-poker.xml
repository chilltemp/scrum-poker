<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Scrum Poker">
    <Require feature="rpc"/>
    <!--Require feature="views"/-->
  </ModulePrefs>
  <Content type="html">
    <![CDATA[
<!DOCTYPE html>
<html ng-app="scrumPokerHangout">
  <head>
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
    <style>
body {
  background: #DDD;
  color: #000;
}
.person {
  list-style: none;
  padding: 5px;
  clear: both;

}
.person li {
  list-style: none;
  margin-bottom: .5em;

}
.avatar {
  /*width: 64px;*/
  height: 4em;
}
.infoBlock {
  vertical-align: top;
  display: inline-block;
  width: 220px;
}
.infoBlock p {
  margin: 0 .5em .5em .5em;
}
.pokerCardSm {
  height: 2em;
  width: 1.5em;
  border: 2px solid #aaa;
  -webkit-border-radius: 6px;
  -moz-border-radius: 6px;
  border-radius: 6px;
  float: left;
  text-align: center;
  background: #55f;
  margin: 3px;
}
.pokerCardSm div {
  font-size: 1.8em;
  background: transparent;
}
.pokerCardLg {
  height: 4em;
  width: 3em;
  border: 2px solid #aaa;
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  border-radius: 10px;
  float: right;
  text-align: center;
  background: #55f;
}
.pokerCardLg div {
  margin-top: .1em;
  font-size: 3em;
  background: transparent;
}
.pokerCardSliceLg {
  height: 4em;
  width: 1em;
  border-left: 2px solid #aaa;
  border-top: 2px solid #aaa;
  border-bottom: 2px solid #aaa;
  -webkit-border-top-left-radius: 10px;
  -webkit-border-bottom-left-radius: 10px;
  -moz-border-radius-topleft: 10px;
  -moz-border-radius-bottomleft: 10px;
  border-top-left-radius: 10px;
  border-bottom-left-radius: 10px;
  float: right;
  text-align: center;
  background: #55f;
}
.pokerCardSliceLg div {
  margin-top: .2em;
}
.pokerCardSm .cardNone:before { content: "?";}
.card0:before { content: "0"; }
.card1:before { content: "1"; }
.card2:before { content: "2"; }
.card3:before { content: "3"; }
.card5:before { content: "5"; }
.card8:before { content: "8"; }
.card13, .card20, .card40 { line-height: 1em; }
.card13:before { content: "13"; font-size: .7em; }
.card20:before { content: "20"; font-size: .7em; }
.card40:before { content: "40"; font-size: .7em; }
.card100 { line-height: .8em; }
.card100:before { content: "100"; font-size: .5em; }
.cardHalf:before { content: "\00BD"; }
.cardInf:before { content: "\221E"; }
.cardBack:before { content: "\2713"; }
.cardBreak:before { 
  font-family: FontAwesome;
  font-size: .7em;
  content: "\f0f4";
}
.cardBreak {
  line-height: 1em;
}

/* card glow yellow */
.consensus {
  background: radial-gradient(ellipse at center, yellow 0%,#55f 100%);
}

.cardStateNone {
  border-style: dotted;
  border-color: #000;
  background: #aaa;
}
.cardStateSelected {
  border-color: yellow;
  color: yellow;
}
.cardStateToggle {
  background: yellow;
}
.info {
  clear: both;
}
/*.info:before {
  content: "\2713\2714\2605\2606\265e\2660\2661\2662\2663\2664\2665\2666\2667\2668\2622\2623"
}*/
.noApp {
  color: grey;
  font-style: italic;
}
.title {
  margin-top: 3px;
}
.buttons {
  float: right;
  margin: 3px;
  clear: both;
}

.animate.ng-enter, 
.animate.ng-leave { 
    transition: 1000ms cubic-bezier(0.645, 0.045, 0.355, 1) all;
    position: relative;
    display: block;
} 
 
.animate.ng-leave.animate.ng-leave-active,
.animate.ng-enter {
    transform: scaleY(0);
    height: 0px;
    opacity: 0;
}
 
.animate.ng-enter.animate.ng-enter-active,
.animate.ng-leave {
    transform: scaleY(1);
    height: 30px;
    opacity: 1;
}

/* This button was generated using CSSButtonGenerator.com */
.iconBtn {
  -moz-box-shadow:inset 0px 1px 0px 0px #d9fbbe;
  -webkit-box-shadow:inset 0px 1px 0px 0px #d9fbbe;
  box-shadow:inset 0px 1px 0px 0px #d9fbbe;
  background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #b8e356), color-stop(1, #a5cc52) );
  background:-moz-linear-gradient( center top, #b8e356 5%, #a5cc52 100% );
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#b8e356', endColorstr='#a5cc52');
  background-color:#b8e356;
  -webkit-border-top-left-radius:20px;
  -moz-border-radius-topleft:20px;
  border-top-left-radius:20px;
  -webkit-border-top-right-radius:20px;
  -moz-border-radius-topright:20px;
  border-top-right-radius:20px;
  -webkit-border-bottom-right-radius:20px;
  -moz-border-radius-bottomright:20px;
  border-bottom-right-radius:20px;
  -webkit-border-bottom-left-radius:20px;
  -moz-border-radius-bottomleft:20px;
  border-bottom-left-radius:20px;
  text-indent:0;
  border:1px solid #83c41a;
  display:inline-block;
  color:#ffffff;
  font-family:Arial;
  font-weight:bold;
  font-style:normal;
  text-decoration:none;
  text-align:center;
  text-shadow:1px 1px 0px #86ae47;

  height: 2.5em;
  width: 2.5em;
  line-height: 1em;
  font-size: 1em;
}
.iconBtn:hover {
  background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #a5cc52), color-stop(1, #b8e356) );
  background:-moz-linear-gradient( center top, #a5cc52 5%, #b8e356 100% );
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#a5cc52', endColorstr='#b8e356');
  background-color:#a5cc52;
}
.iconBtn:active {
  position:relative;
  top:1px;
}
.iconBtn:focus {
  outline: none;
}
.iconBtn span {
  font-size: 1.5em;
}
    </style>
  </head>
  <body ng-controller="mainCtrl">
    <!-- <div class="buttons">
      <button class="iconBtn"><span class="fa fa-gear"/></button>
    </div> -->
    <h1 class="title">Scrum Poker</h1>
    <div>
      <div class="pokerCardSm" ng-repeat="card in cards" ng-click="selectCard(card)"
        ng-class="{cardStateNone: card == 'None', cardStateSelected: card == state.cardSelected, cardStateToggle: card == 'Break' && state.needBreak}"><div class="card{{card}}"></div></div>
    </div>

    <div class="buttons">
      <button class="iconBtn" ng-click="resetAll()" title="Will reset everyones cards to ?, and hide all.  NO UNDO"><span class="fa fa-rotate-left"/></button>
      <button class="iconBtn" ng-click="showAll(false)" ng-show="reveal" title="Will hide all cards from everyone."><span class="fa fa-eye"/></button>
      <button class="iconBtn" ng-click="showAll(true)" ng-hide="reveal" title="Will show all cards to everyone."><span class="fa fa-eye-slash"/></button>
    </div>

    <div id="mainList"
      <ul class="person" >
        <li ng-repeat="person in people | orderBy:'displayName' | filter:{online: true} " ng-class="{animate: $parent.animate}">
          <img class="avatar" src="{{person.image}}" alt="avatar" />
          <div class="infoBlock">

            <div class="pokerCardLg" ng-class="{cardStateNone: person.state.cardSelected == 'None', consensus: consensus}">
              <div ng-show="reveal" class="card{{person.state.cardSelected}}"></div>
              <div ng-show="!reveal && person.state.cardSelected == 'None'" class="cardNone"></div>
              <div ng-show="!reveal && person.state.cardSelected != 'None'" class="cardBack"></div>
            </div>
            <div class="pokerCardSliceLg" ng-show="reveal" ng-repeat="card in person.state.cardHistory track by $index">
              <div class="card{{card}}"></div>
            </div>
            <div class="pokerCardLg" ng-show="person.state.needBreak"><div class="cardBreak"></div></div>

            <p class="displayName" ng-class="{noApp: !person.hasAppEnabled}">{{person.displayName}}</p>
            <p class="noApp" ng-hide="person.hasAppEnabled">Scrum Poker not loaded.</p>

          </div>

        </li>
      </ul>
    </div>

    <div id="debug" class="info"></div>

    
    <script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-animate.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0/underscore-min.js"></script>
    <script>

function createDefaultState() {
	return {
		cardSelected: "None",
		cardHistory: [],
		needBreak: false
	};
}

var pokerApp = angular.module('scrumPokerHangout', ['ngAnimate']);

pokerApp.controller('mainCtrl', function ($scope) {

	$scope.cards = ["0","Half","1","2","3","5","8","13","20","40","100","Inf","Break","None"];
	$scope.people = [];
	$scope.state = createDefaultState();
	$scope.reveal = false;
	$scope.animate = false;
	$scope.cfg = {
		lgMinFont: 4,
		lgMaxFont: 16,
		lgAutoSize: true
	};
	/* Additional properties defined in the resetMe function below. */


	$scope.update = _.debounce($scope.$apply, 100);

	$scope.autoSizeMainList = _.debounce(function() {
		var mainList = $("#mainList");
		// if(delta === 'auto') {
			var w = $(window);
			var d = $(document);

			for(var f = $scope.cfg.lgMaxFont; f >= $scope.cfg.lgMinFont; f--) {
				mainList.css({'font-size': f});
				if(d.height() <= w.height()) {
					break;
				}
			}

		// } else {
		// 	var fontSize = parseInt(mainList.css("font-size"));
		// 	fontSize = fontSize + delta + "px";
		// 	mainList.css({'font-size': fontSize});
		// }

		//$('#debug').text('w'+$(window).height()+'  d'+$(document).height());
	}, 100);

	$scope.selectCard = function(card) {
		if($scope.state.cardSelected === card) {
			return;
		}

		if($scope.reveal && $scope.state.cardSelected && $scope.state.cardSelected !== "None") {
			$scope.state.cardHistory.unshift($scope.state.cardSelected);
		}

		if(card === "Break") {
			$scope.state.needBreak = !$scope.state.needBreak;
		} else {
			$scope.state.cardSelected = card;
		}

		$scope.update();
		$scope.sync();
	};

	$scope.sync = _.debounce(function() {
		var key = gapi.hangout.getLocalParticipantId();
		var value = JSON.stringify($scope.state);

		gapi.hangout.data.setValue(key, value);
	}, 250);

	$scope.resetAll = function() {
		gapi.hangout.data.setValue('!resetAll', (JSON.stringify(new Date())));
		$scope.showAll(false);
	};

	$scope.showAll = function(reveal) {
		gapi.hangout.data.setValue('!reveal', JSON.stringify(reveal));
		$scope.reveal = reveal;
		$scope.update();
	};

	$scope.hasConsensus = function() {
		var card = null;
		for (var s = $scope.people.length - 1; s >= 0; s--) {
			if($scope.people[s].state.cardSelected === "None") {
				return false;
			} else if(card === null) {
				card = $scope.people[s].state.cardSelected;
			} else if(card !== $scope.people[s].state.cardSelected) {
				return false;
			}
		}

		return true;
	};

	$scope.applyStateChange = function(eventObj) {
		$scope.consensus = false;

		for (var e = eventObj.addedKeys.length - 1; e >= 0; e--) {

			if(eventObj.addedKeys[e].key === '!resetAll') {
				if(eventObj.addedKeys[e].value != $scope.lastReset) {
					$scope.resetMe(eventObj.addedKeys[e].value);
				}
			} else if(eventObj.addedKeys[e].key === '!reveal') {
				$scope.reveal = JSON.parse(eventObj.addedKeys[e].value);

				if($scope.reveal) {
					$scope.revealsSinceReset++;
					if($scope.revealsSinceReset === 1 && $scope.people.length > 1) {
						$scope.consensus = $scope.hasConsensus();
					}
				}
			} else {
				for (var s = $scope.people.length - 1; s >= 0; s--) {
					if( $scope.people[s].id === eventObj.addedKeys[e].key ) {
						$scope.people[s].state = JSON.parse(eventObj.addedKeys[e].value);
					}
				}
			}
		}

		$scope.update();
	};

	$scope.applyParticipants = function(participants) {
		for (var e = participants.length - 1; e >= 0; e--) {

			var found = false;			
			for (var s = $scope.people.length - 1; s >= 0; s--) {
				if( $scope.people[s].id === participants[e].id ) {
					found = true;
					$scope.people[s].hasAppEnabled = participants[e].hasAppEnabled;
					$scope.people[s].online = true;
				}
			}

			if(!found) {
				$scope.people.push({
					id: participants[e].id,
					displayName: participants[e].person.displayName,
					image: participants[e].person.image.url,
					state: createDefaultState(),
					online: true
				});
			}
		} // for: eventObj.participants

		$scope.update();
	};

	$scope.resetMe = function(resetTime) {
		$scope.lastReset = resetTime;
		$scope.consensus = false;
		$scope.selectCard('None');
		$scope.state.cardHistory = [];
		$scope.revealsSinceReset = 0;

		$scope.update();
	};
	$scope.resetMe(null);

	gapi.hangout.onApiReady.add(function(eventObj){
		if (eventObj.isApiReady) {

			var participants = gapi.hangout.getParticipants();
			var state = gapi.hangout.data.getState();

			$scope.applyParticipants(participants);

			// Create a similar object to the state change event
			var e = { addedKeys: [] };
			for(var key in state) {
				if (state.hasOwnProperty(key)) {
					e.addedKeys.push({ key: key, value: state[key] });
				}
			}
			$scope.applyStateChange(e);
		}

		$scope.update();
	});

	gapi.hangout.data.onStateChanged.add(function(eventObj) {
		$scope.applyStateChange(eventObj);
	});

	gapi.hangout.onParticipantsChanged.add(function(eventObj) {
		$scope.applyParticipants(eventObj.participants);
		$scope.autoSizeMainList();
	});

	gapi.hangout.onParticipantsRemoved.add(function(eventObj) {
		for (var e = eventObj.removedParticipants.length - 1; e >= 0; e--) {
			for (var s = $scope.people.length - 1; s >= 0; s--) {
				if(eventObj.removedParticipants[e].id == $scope.people[s].id) {
					$scope.people[s].online = false;
				}
			}
		}

		$scope.autoSizeMainList();
		$scope.update();
	});

	$(window).resize(_.debounce(function() {
		$scope.autoSizeMainList();
		$scope.animate = true;
		$scope.update();
	}, 500));
});
    </script>
  </body>
</html>
    ]]>
  </Content>
</Module>